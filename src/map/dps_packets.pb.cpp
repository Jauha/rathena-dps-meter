// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#include "dps_packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace companion
{
    class DamageEventDefaultTypeInternal
    {
    public:
        ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DamageEvent> _instance;
    } _DamageEvent_default_instance_;
    class CredentialsDefaultTypeInternal
    {
    public:
        ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Credentials> _instance;
    } _Credentials_default_instance_;
} // namespace companion
static void InitDefaultsscc_info_Credentials_packet_2eproto()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::companion::_Credentials_default_instance_;
        new (ptr)::companion::Credentials();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::companion::Credentials::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Credentials_packet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Credentials_packet_2eproto}, {}};

static void InitDefaultsscc_info_DamageEvent_packet_2eproto()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::companion::_DamageEvent_default_instance_;
        new (ptr)::companion::DamageEvent();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::companion::DamageEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DamageEvent_packet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DamageEvent_packet_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_packet_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **file_level_enum_descriptors_packet_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_packet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_packet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::companion::DamageEvent, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::companion::DamageEvent, id_),
    PROTOBUF_FIELD_OFFSET(::companion::DamageEvent, source_),
    PROTOBUF_FIELD_OFFSET(::companion::DamageEvent, target_),
    PROTOBUF_FIELD_OFFSET(::companion::DamageEvent, damage_),
    PROTOBUF_FIELD_OFFSET(::companion::DamageEvent, map_),
    PROTOBUF_FIELD_OFFSET(::companion::DamageEvent, critical_),
    PROTOBUF_FIELD_OFFSET(::companion::DamageEvent, timestamp_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::companion::Credentials, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::companion::Credentials, username_),
    PROTOBUF_FIELD_OFFSET(::companion::Credentials, password_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::companion::DamageEvent)},
    {12, -1, sizeof(::companion::Credentials)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::companion::_DamageEvent_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::companion::_Credentials_default_instance_),
};

const char descriptor_table_protodef_packet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\014packet.proto\022\tcompanion\"{\n\013DamageEvent"
    "\022\n\n\002id\030\001 \001(\005\022\016\n\006source\030\002 \001(\005\022\016\n\006target\030\003"
    " \001(\005\022\016\n\006damage\030\004 \001(\003\022\013\n\003map\030\005 \001(\005\022\020\n\010cri"
    "tical\030\006 \001(\010\022\021\n\ttimestamp\030\007 \001(\003\"1\n\013Creden"
    "tials\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001("
    "\tb\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_packet_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_packet_2eproto_sccs[2] = {
    &scc_info_Credentials_packet_2eproto.base,
    &scc_info_DamageEvent_packet_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_packet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto = {
    false,
    false,
    descriptor_table_protodef_packet_2eproto,
    "packet.proto",
    209,
    &descriptor_table_packet_2eproto_once,
    descriptor_table_packet_2eproto_sccs,
    descriptor_table_packet_2eproto_deps,
    2,
    0,
    schemas,
    file_default_instances,
    TableStruct_packet_2eproto::offsets,
    file_level_metadata_packet_2eproto,
    2,
    file_level_enum_descriptors_packet_2eproto,
    file_level_service_descriptors_packet_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_packet_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_packet_2eproto)), true);
namespace companion
{

    // ===================================================================

    void DamageEvent::InitAsDefaultInstance()
    {
    }
    class DamageEvent::_Internal
    {
    public:
    };

    DamageEvent::DamageEvent(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena)
    {
        SharedCtor();
        RegisterArenaDtor(arena);
        // @@protoc_insertion_point(arena_constructor:companion.DamageEvent)
    }
    DamageEvent::DamageEvent(const DamageEvent &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&id_, &from.id_,
                 static_cast<size_t>(reinterpret_cast<char *>(&critical_) -
                                     reinterpret_cast<char *>(&id_)) +
                     sizeof(critical_));
        // @@protoc_insertion_point(copy_constructor:companion.DamageEvent)
    }

    void DamageEvent::SharedCtor()
    {
        ::memset(&id_, 0, static_cast<size_t>(reinterpret_cast<char *>(&critical_) - reinterpret_cast<char *>(&id_)) + sizeof(critical_));
    }

    DamageEvent::~DamageEvent()
    {
        // @@protoc_insertion_point(destructor:companion.DamageEvent)
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    void DamageEvent::SharedDtor()
    {
        GOOGLE_DCHECK(GetArena() == nullptr);
    }

    void DamageEvent::ArenaDtor(void *object)
    {
        DamageEvent *_this = reinterpret_cast<DamageEvent *>(object);
        (void)_this;
    }
    void DamageEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
    {
    }
    void DamageEvent::SetCachedSize(int size) const
    {
        _cached_size_.Set(size);
    }
    const DamageEvent &DamageEvent::default_instance()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DamageEvent_packet_2eproto.base);
        return *internal_default_instance();
    }

    void DamageEvent::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:companion.DamageEvent)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&id_, 0, static_cast<size_t>(reinterpret_cast<char *>(&critical_) - reinterpret_cast<char *>(&id_)) + sizeof(critical_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *DamageEvent::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
        (void)arena;
        while (!ctx->Done(&ptr))
        {
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            CHK_(ptr);
            switch (tag >> 3)
            {
            // int32 id = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
                {
                    id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            // int32 source = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16))
                {
                    source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            // int32 target = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24))
                {
                    target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            // int64 damage = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32))
                {
                    damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            // int32 map = 5;
            case 5:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40))
                {
                    map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            // bool critical = 6;
            case 6:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48))
                {
                    critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            // int64 timestamp = 7;
            case 7:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56))
                {
                    timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
            {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0)
                {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
            } // switch
        }     // while
    success:
        return ptr;
    failure:
        ptr = nullptr;
        goto success;
#undef CHK_
    }

    ::PROTOBUF_NAMESPACE_ID::uint8 *DamageEvent::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:companion.DamageEvent)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 id = 1;
        if (this->id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
        }

        // int32 source = 2;
        if (this->source() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_source(), target);
        }

        // int32 target = 3;
        if (this->target() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target(), target);
        }

        // int64 damage = 4;
        if (this->damage() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_damage(), target);
        }

        // int32 map = 5;
        if (this->map() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_map(), target);
        }

        // bool critical = 6;
        if (this->critical() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_critical(), target);
        }

        // int64 timestamp = 7;
        if (this->timestamp() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_timestamp(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:companion.DamageEvent)
        return target;
    }

    size_t DamageEvent::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:companion.DamageEvent)
        size_t total_size = 0;

        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 id = 1;
        if (this->id() != 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_id());
        }

        // int32 source = 2;
        if (this->source() != 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_source());
        }

        // int64 damage = 4;
        if (this->damage() != 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                              this->_internal_damage());
        }

        // int32 target = 3;
        if (this->target() != 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_target());
        }

        // int32 map = 5;
        if (this->map() != 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_map());
        }

        // int64 timestamp = 7;
        if (this->timestamp() != 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                              this->_internal_timestamp());
        }

        // bool critical = 6;
        if (this->critical() != 0)
        {
            total_size += 1 + 1;
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
        }
        int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void DamageEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        // @@protoc_insertion_point(generalized_merge_from_start:companion.DamageEvent)
        GOOGLE_DCHECK_NE(&from, this);
        const DamageEvent *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DamageEvent>(
                &from);
        if (source == nullptr)
        {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:companion.DamageEvent)
            ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
        }
        else
        {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:companion.DamageEvent)
            MergeFrom(*source);
        }
    }

    void DamageEvent::MergeFrom(const DamageEvent &from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:companion.DamageEvent)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        if (from.id() != 0)
        {
            _internal_set_id(from._internal_id());
        }
        if (from.source() != 0)
        {
            _internal_set_source(from._internal_source());
        }
        if (from.damage() != 0)
        {
            _internal_set_damage(from._internal_damage());
        }
        if (from.target() != 0)
        {
            _internal_set_target(from._internal_target());
        }
        if (from.map() != 0)
        {
            _internal_set_map(from._internal_map());
        }
        if (from.timestamp() != 0)
        {
            _internal_set_timestamp(from._internal_timestamp());
        }
        if (from.critical() != 0)
        {
            _internal_set_critical(from._internal_critical());
        }
    }

    void DamageEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        // @@protoc_insertion_point(generalized_copy_from_start:companion.DamageEvent)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    void DamageEvent::CopyFrom(const DamageEvent &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:companion.DamageEvent)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool DamageEvent::IsInitialized() const
    {
        return true;
    }

    void DamageEvent::InternalSwap(DamageEvent *other)
    {
        using std::swap;
        _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(DamageEvent, critical_) + sizeof(DamageEvent::critical_) - PROTOBUF_FIELD_OFFSET(DamageEvent, id_)>(
            reinterpret_cast<char *>(&id_),
            reinterpret_cast<char *>(&other->id_));
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata DamageEvent::GetMetadata() const
    {
        return GetMetadataStatic();
    }

    // ===================================================================

    void Credentials::InitAsDefaultInstance()
    {
    }
    class Credentials::_Internal
    {
    public:
    };

    Credentials::Credentials(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena)
    {
        SharedCtor();
        RegisterArenaDtor(arena);
        // @@protoc_insertion_point(arena_constructor:companion.Credentials)
    }
    Credentials::Credentials(const Credentials &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        if (!from._internal_username().empty())
        {
            username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
                          GetArena());
        }
        password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        if (!from._internal_password().empty())
        {
            password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
                          GetArena());
        }
        // @@protoc_insertion_point(copy_constructor:companion.Credentials)
    }

    void Credentials::SharedCtor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Credentials_packet_2eproto.base);
        username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    Credentials::~Credentials()
    {
        // @@protoc_insertion_point(destructor:companion.Credentials)
        SharedDtor();
        _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    void Credentials::SharedDtor()
    {
        GOOGLE_DCHECK(GetArena() == nullptr);
        username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
        password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    }

    void Credentials::ArenaDtor(void *object)
    {
        Credentials *_this = reinterpret_cast<Credentials *>(object);
        (void)_this;
    }
    void Credentials::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
    {
    }
    void Credentials::SetCachedSize(int size) const
    {
        _cached_size_.Set(size);
    }
    const Credentials &Credentials::default_instance()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Credentials_packet_2eproto.base);
        return *internal_default_instance();
    }

    void Credentials::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:companion.Credentials)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
        password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *Credentials::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
        (void)arena;
        while (!ctx->Done(&ptr))
        {
            ::PROTOBUF_NAMESPACE_ID::uint32 tag;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
            CHK_(ptr);
            switch (tag >> 3)
            {
            // string username = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10))
                {
                    auto str = _internal_mutable_username();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "companion.Credentials.username"));
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            // string password = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
                {
                    auto str = _internal_mutable_password();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "companion.Credentials.password"));
                    CHK_(ptr);
                }
                else
                    goto handle_unusual;
                continue;
            default:
            {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0)
                {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
            } // switch
        }     // while
    success:
        return ptr;
    failure:
        ptr = nullptr;
        goto success;
#undef CHK_
    }

    ::PROTOBUF_NAMESPACE_ID::uint8 *Credentials::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:companion.Credentials)
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        // string username = 1;
        if (this->username().size() > 0)
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "companion.Credentials.username");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_username(), target);
        }

        // string password = 2;
        if (this->password().size() > 0)
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "companion.Credentials.password");
            target = stream->WriteStringMaybeAliased(
                2, this->_internal_password(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:companion.Credentials)
        return target;
    }

    size_t Credentials::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:companion.Credentials)
        size_t total_size = 0;

        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string username = 1;
        if (this->username().size() > 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_username());
        }

        // string password = 2;
        if (this->password().size() > 0)
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_password());
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
        }
        int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
        SetCachedSize(cached_size);
        return total_size;
    }

    void Credentials::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        // @@protoc_insertion_point(generalized_merge_from_start:companion.Credentials)
        GOOGLE_DCHECK_NE(&from, this);
        const Credentials *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Credentials>(
                &from);
        if (source == nullptr)
        {
            // @@protoc_insertion_point(generalized_merge_from_cast_fail:companion.Credentials)
            ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
        }
        else
        {
            // @@protoc_insertion_point(generalized_merge_from_cast_success:companion.Credentials)
            MergeFrom(*source);
        }
    }

    void Credentials::MergeFrom(const Credentials &from)
    {
        // @@protoc_insertion_point(class_specific_merge_from_start:companion.Credentials)
        GOOGLE_DCHECK_NE(&from, this);
        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
        (void)cached_has_bits;

        if (from.username().size() > 0)
        {
            _internal_set_username(from._internal_username());
        }
        if (from.password().size() > 0)
        {
            _internal_set_password(from._internal_password());
        }
    }

    void Credentials::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
    {
        // @@protoc_insertion_point(generalized_copy_from_start:companion.Credentials)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    void Credentials::CopyFrom(const Credentials &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:companion.Credentials)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Credentials::IsInitialized() const
    {
        return true;
    }

    void Credentials::InternalSwap(Credentials *other)
    {
        using std::swap;
        _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
        username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
        password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata Credentials::GetMetadata() const
    {
        return GetMetadataStatic();
    }

    // @@protoc_insertion_point(namespace_scope)
} // namespace companion
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::companion::DamageEvent *Arena::CreateMaybeMessage<::companion::DamageEvent>(Arena *arena)
{
    return Arena::CreateMessageInternal<::companion::DamageEvent>(arena);
}
template <>
PROTOBUF_NOINLINE ::companion::Credentials *Arena::CreateMaybeMessage<::companion::Credentials>(Arena *arena)
{
    return Arena::CreateMessageInternal<::companion::Credentials>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
